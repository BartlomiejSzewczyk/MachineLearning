{"version":3,"sources":["Styles/resolutions.js","Firebase/firebase.js","Movie/MovieField.js","App.js","reportWebVitals.js","index.js"],"names":["device","firebase","initializeApp","apiKey","authDomain","databaseURL","storageBucket","SelectMovieField","styled","div","Header","SelectField","RatingField","RatingLabel","label","ConfirmButton","button","props","disabled","Poster","img","MovieInfo","MovieField","useState","movies","setMovies","selectedMovie","setSelectedMovie","selectedRate","setSelectedRate","Map","ratingMap","setRatingMap","posterUrl","setPosterUrl","description","setDescription","movieYear","setMovieYear","movieGenres","setMovieGenres","isRated","setRatedState","useEffect","dbRef","database","ref","child","moviesFromDb","on","snap","forEach","movie","push","value","key","length","getMovieInfo","handleNextMovie","rate","mapCopy","set","newMovieIndex","index","get","findFreeIndex","fetch","val","then","response","json","data","poster_path","overview","release_date","genres","name","freeIndex","onChange","options","placeholder","noResultsText","rating","i","for","className","checked","onClick","event","target","renderCheckboxes","size","ratingObj","toast","alt","src","App","position","hideProgressBar","autoClose","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1845d9b6.chunk.js","sourcesContent":["export const device = {\r\n  laptop: `(max-width: 1440px)`,\r\n  desktop: `(min-width: 1441px)`,\r\n};\r\n","import firebase from \"firebase\";\r\n\r\nvar config = {\r\n  apiKey: \"AIzaSyBCjEoB2RKgBw9zPHVWS-syRsv1Vm_889w\",\r\n  authDomain: \"machinelearning-cfc59.firebaseapp.com\",\r\n  databaseURL: \"https://machinelearning-cfc59.firebaseio.com\",\r\n  storageBucket: \"machinelearning-cfc59.appspot.com\",\r\n};\r\n\r\nfirebase.initializeApp(config);\r\n\r\nexport default firebase;\r\n","import styled from \"styled-components\";\r\nimport { device } from \"../Styles/resolutions\";\r\nimport { useState, useEffect } from \"react\";\r\nimport Select from \"react-select\";\r\nimport Checkbox from \"rc-checkbox\";\r\nimport \"../Styles/checkboxes-styles.css\";\r\nimport firebase from \"../Firebase/firebase\";\r\nimport { toast } from \"react-toastify\";\r\n\r\nconst SelectMovieField = styled.div`\r\n  position: absolute;\r\n  top: 15%;\r\n  left: 35%;\r\n  width: 30%;\r\n  height: 80%;\r\n`;\r\n\r\nconst Header = styled.div`\r\n  position: relative;\r\n  text-align: center;\r\n  @media ${device.laptop} {\r\n    font-size: 40px;\r\n  }\r\n  @media ${device.desktop} {\r\n    font-size: 46px;\r\n  }\r\n`;\r\n\r\nconst SelectField = styled.div`\r\n  position: relative;\r\n  margin-top: 20px;\r\n  width: 80%;\r\n  left: 10%;\r\n`;\r\n\r\nconst RatingField = styled.div`\r\n  position: relative;\r\n  margin-top: 20px;\r\n  text-align: center;\r\n`;\r\n\r\nconst RatingLabel = styled.label`\r\n  padding: 5px;\r\n  @media ${device.laptop} {\r\n    font-size: 22px;\r\n  }\r\n  @media ${device.desktop} {\r\n    font-size: 26px;\r\n  }\r\n`;\r\n\r\nconst ConfirmButton = styled.button`\r\n  position: relative;\r\n  margin-top: 20px;\r\n  background: ${(props) => {\r\n    if (props.disabled) {\r\n      return \"##4848716e\";\r\n    } else {\r\n      return \"#484871\";\r\n    }\r\n  }};\r\n  pointer-events: ${(props) => {\r\n    if (props.disabled) {\r\n      return \"none\";\r\n    }\r\n  }};\r\n  width: 150px;\r\n  max-width: 30%;\r\n  height: 50px;\r\n  border-radius: 20px;\r\n  border: 2px solid black;\r\n  color: white;\r\n  outline: none;\r\n  cursor: pointer;\r\n  left: 50%;\r\n  transform: translateX(-50%);\r\n  @media ${device.laptop} {\r\n    font-size: 20px;\r\n  }\r\n  @media ${device.desktop} {\r\n    font-size: 22px;\r\n  }\r\n`;\r\n\r\nconst Poster = styled.img`\r\n  position: absolute;\r\n  width: 20%;\r\n  top: 50%;\r\n  transform: translateY(-50%);\r\n  right: 50px;\r\n`;\r\n\r\nconst MovieInfo = styled.div`\r\n  position: absolute;\r\n  top: 15%;\r\n  max-width: 30%;\r\n  left: 3%;\r\n  @media ${device.laptop} {\r\n    font-size: 18px;\r\n  }\r\n  @media ${device.desktop} {\r\n    font-size: 20px;\r\n  }\r\n`;\r\n\r\nconst MovieField = () => {\r\n  const [movies, setMovies] = useState([]);\r\n  const [selectedMovie, setSelectedMovie] = useState(\"\");\r\n  const [selectedRate, setSelectedRate] = useState(\"\");\r\n  const [ratingMap, setRatingMap] = useState(new Map());\r\n  const [posterUrl, setPosterUrl] = useState(\"\");\r\n  const [description, setDescription] = useState(\"\");\r\n  const [movieYear, setMovieYear] = useState(\"\");\r\n  const [movieGenres, setMovieGenres] = useState(\"\");\r\n  const [isRated, setRatedState] = useState(false);\r\n\r\n  const notify = () => toast(\"Dziękujęmy za ocenienie filmów !\");\r\n\r\n  useEffect(() => {\r\n    const dbRef = firebase.database().ref().child(\"movies\");\r\n    var moviesFromDb = [];\r\n    dbRef.on(\"value\", (snap) => {\r\n      snap.forEach((movie) => {\r\n        moviesFromDb.push({ value: movie.key, label: movie.key });\r\n      });\r\n      setMovies(moviesFromDb);\r\n    });\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (movies.length !== 0) {\r\n      setSelectedMovie(movies[0]);\r\n    }\r\n  }, [movies]);\r\n\r\n  useEffect(() => {\r\n    getMovieInfo(selectedMovie);\r\n  }, [selectedMovie]);\r\n\r\n  const renderCheckboxes = () => {\r\n    var rating = [];\r\n    for (var i = 0; i < 6; ++i) {\r\n      rating.push(\r\n        <RatingLabel for={i}>\r\n          {i}\r\n          <Checkbox\r\n            className=\"checkboxStyle\"\r\n            name={i}\r\n            checked={\r\n              ratingMap.get(selectedMovie.value)\r\n                ? ratingMap.get(selectedMovie.value) === `${i}`\r\n                : selectedRate === `${i}`\r\n            }\r\n            onClick={(event) => {\r\n              setSelectedRate(event.target.name);\r\n              handleNextMovie(event.target.name);\r\n            }}\r\n          >\r\n            test\r\n          </Checkbox>\r\n        </RatingLabel>\r\n      );\r\n    }\r\n    rating.push(<br />);\r\n    rating.push(<br />);\r\n    rating.push(\r\n      <RatingLabel for={-1}>\r\n        Nie znam tego filmu\r\n        <Checkbox\r\n          className=\"checkboxStyle\"\r\n          name={-1}\r\n          checked={\r\n            ratingMap.get(selectedMovie.value)\r\n              ? ratingMap.get(selectedMovie.value) === `-1`\r\n              : selectedRate === `-1`\r\n          }\r\n          onClick={(event) => {\r\n            setSelectedRate(event.target.name);\r\n            handleNextMovie(event.target.name);\r\n          }}\r\n        />\r\n      </RatingLabel>\r\n    );\r\n    return rating;\r\n  };\r\n\r\n  const handleNextMovie = (rate) => {\r\n    var mapCopy = new Map(ratingMap);\r\n    mapCopy.set(selectedMovie.value, rate);\r\n    setRatingMap(mapCopy);\r\n    var newMovieIndex = 0;\r\n    movies.forEach((movie, index) => {\r\n      if (movie.value === selectedMovie.value) {\r\n        newMovieIndex = index + 1;\r\n      }\r\n    });\r\n    if (\r\n      movies.length > newMovieIndex &&\r\n      !ratingMap.get(movies[newMovieIndex].value)\r\n    ) {\r\n      setSelectedMovie(movies[newMovieIndex]);\r\n      setSelectedRate(\"\");\r\n    } else {\r\n      newMovieIndex = findFreeIndex();\r\n      if (movies.length > newMovieIndex) {\r\n        setSelectedMovie(movies[newMovieIndex]);\r\n        setSelectedRate(\"\");\r\n      }\r\n    }\r\n  };\r\n\r\n  const getMovieInfo = (movie) => {\r\n    if(!movie) {\r\n      return;\r\n    }\r\n\r\n    const dbRef = firebase\r\n      .database()\r\n      .ref()\r\n      .child(\"movies\")\r\n      .child(`${movie.value}`);\r\n    dbRef.on(\"value\", (snap) => {\r\n      fetch(\r\n        `https://api.themoviedb.org/3/movie/${snap.val()}?api_key=72ed6ba834b7f05dc61a1e4fc27613dd&language=pl`\r\n      )\r\n        .then((response) => response.json())\r\n        .then((data) => {\r\n          setPosterUrl(data.poster_path);\r\n          setDescription(data.overview);\r\n          setMovieYear(data.release_date);\r\n          if (data.genres) {\r\n            setMovieGenres(data.genres[0].name);\r\n          }\r\n        });\r\n    });\r\n  };\r\n\r\n  const findFreeIndex = () => {\r\n    var freeIndex = movies.length;\r\n    movies.forEach((movie, index) => {\r\n      if (\r\n        !ratingMap.get(movie.value) &&\r\n        !(movie.value === selectedMovie.value)\r\n      ) {\r\n        freeIndex = index;\r\n      }\r\n    });\r\n    return freeIndex;\r\n  };\r\n\r\n  const handleConfirmButton = () => {\r\n    const dbRef = firebase.database().ref().child(\"rating\");\r\n    var ratingObj = {};\r\n    ratingMap.forEach((rate, name) => {\r\n      ratingObj[name] = rate;\r\n    });\r\n    dbRef.push(ratingObj);\r\n    notify();\r\n    setRatedState(true);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <SelectMovieField>\r\n        <Header>Wybierz film do oceny:</Header>\r\n        <SelectField>\r\n          <Select\r\n            value={selectedMovie}\r\n            onChange={setSelectedMovie}\r\n            options={movies}\r\n            placeholder={`Wybierz z listy ...`}\r\n            noResultsText={`Nie znaleziono wyników`}\r\n          />\r\n        </SelectField>\r\n        {selectedMovie ? <RatingField>{renderCheckboxes()}</RatingField> : null}\r\n        {ratingMap.size === movies.length && movies.length ? (\r\n          <ConfirmButton onClick={handleConfirmButton} disabled={isRated}>\r\n            Wyślij\r\n          </ConfirmButton>\r\n        ) : null}\r\n      </SelectMovieField>\r\n      <MovieInfo>\r\n        {movieGenres ? `Gatunek: ${movieGenres}` : null}\r\n        {movieGenres ? (\r\n          <>\r\n            <br />\r\n            <br />\r\n          </>\r\n        ) : null}\r\n        {movieYear ? `Data premiery: ${movieYear}` : null}\r\n        {movieYear ? (\r\n          <>\r\n            <br />\r\n            <br />\r\n          </>\r\n        ) : null}\r\n        {description}\r\n      </MovieInfo>\r\n      {posterUrl ? (\r\n        <Poster\r\n          alt=\"poster\"\r\n          src={`https://image.tmdb.org/t/p/original${posterUrl}`}\r\n        />\r\n      ) : null}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default MovieField;\r\n","import MovieField from \"./Movie/MovieField\";\r\nimport \"./Styles/app-styles.css\";\r\nimport { ToastContainer } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\n\r\nfunction App() {\r\n  return (\r\n    <>\r\n      <MovieField />\r\n      <ToastContainer\r\n        position=\"top-center\"\r\n        hideProgressBar={true}\r\n        autoClose={false}\r\n      />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}