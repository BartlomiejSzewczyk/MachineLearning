{"version":3,"sources":["Styles/resolutions.js","Firebase/firebase.js","Movie/MovieField.js","App.js","reportWebVitals.js","index.js"],"names":["device","firebase","initializeApp","apiKey","authDomain","databaseURL","storageBucket","SelectMovieField","styled","div","Header","SelectField","RatingField","RatingLabel","label","ConfirmButton","button","props","disabled","Poster","img","MovieInfo","Counter","SkipButton","CustomSelect","select","CustomOption","option","skipped","MovieField","useState","movies","setMovies","selectedMovie","setSelectedMovie","selectedRate","setSelectedRate","Map","ratingMap","setRatingMap","posterUrl","setPosterUrl","description","setDescription","movieYear","setMovieYear","movieGenres","setMovieGenres","isRated","setRatedState","skippedMovies","setSkippedMovies","useEffect","mapCopy","window","sessionStorage","getItem","skippedMoviesCopy","JSON","parse","Object","entries","key","value","set","moviesFromStorage","moviesArray","keys","forEach","index","push","isSelectedMovie","movie","get","dbRef","database","ref","child","moviesFromDb","on","snap","shuffle","moviesObj","setItem","stringify","getMovieInfo","handleNextMovie","rate","newMovieIndex","length","findFreeIndex","ratingObj","fromEntries","fetch","val","then","response","json","data","poster_path","overview","release_date","genres","name","freeIndex","array","temporaryValue","randomIndex","currentIndex","Math","floor","random","onChange","event","target","handleSelect","optionsArray","renderOptions","rating","i","for","className","checked","onClick","renderCheckboxes","size","toast","alt","src","App","position","hideProgressBar","autoClose","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.944f0e79.chunk.js","sourcesContent":["export const device = {\n  laptop: `(max-width: 1440px)`,\n  desktop: `(min-width: 1441px)`,\n};\n","import firebase from \"firebase\";\n\nvar config = {\n  apiKey: \"AIzaSyBCjEoB2RKgBw9zPHVWS-syRsv1Vm_889w\",\n  authDomain: \"machinelearning-cfc59.firebaseapp.com\",\n  databaseURL: \"https://machinelearning-cfc59.firebaseio.com\",\n  storageBucket: \"machinelearning-cfc59.appspot.com\",\n};\n\nfirebase.initializeApp(config);\n\nexport default firebase;\n","import styled from \"styled-components\";\nimport { device } from \"../Styles/resolutions\";\nimport { useState, useEffect } from \"react\";\nimport Select from \"react-select\";\nimport Checkbox from \"rc-checkbox\";\nimport \"../Styles/checkboxes-styles.css\";\nimport firebase from \"../Firebase/firebase\";\nimport { toast } from \"react-toastify\";\n\nconst SelectMovieField = styled.div`\n  position: absolute;\n  top: 15%;\n  left: 35%;\n  width: 30%;\n  height: 80%;\n`;\n\nconst Header = styled.div`\n  position: relative;\n  text-align: center;\n  @media ${device.laptop} {\n    font-size: 40px;\n  }\n  @media ${device.desktop} {\n    font-size: 46px;\n  }\n`;\n\nconst SelectField = styled.div`\n  position: relative;\n  margin-top: 20px;\n  width: 80%;\n  left: 10%;\n`;\n\nconst RatingField = styled.div`\n  position: relative;\n  margin-top: 20px;\n  text-align: center;\n`;\n\nconst RatingLabel = styled.label`\n  padding: 5px;\n  @media ${device.laptop} {\n    font-size: 22px;\n  }\n  @media ${device.desktop} {\n    font-size: 26px;\n  }\n`;\n\nconst ConfirmButton = styled.button`\n  position: relative;\n  margin-top: 10px;\n  background: ${(props) => {\n    if (props.disabled) {\n      return \"##4848716e\";\n    } else {\n      return \"#484871\";\n    }\n  }};\n  pointer-events: ${(props) => {\n    if (props.disabled) {\n      return \"none\";\n    }\n  }};\n  width: 150px;\n  max-width: 30%;\n  height: 50px;\n  border-radius: 20px;\n  border: 1px solid black;\n  color: white;\n  outline: none;\n  cursor: pointer;\n  left: 50%;\n  transform: translateX(-50%);\n  @media ${device.laptop} {\n    font-size: 20px;\n  }\n  @media ${device.desktop} {\n    font-size: 22px;\n  }\n`;\n\nconst Poster = styled.img`\n  position: absolute;\n  width: 20%;\n  top: 50%;\n  transform: translateY(-50%);\n  right: 50px;\n`;\n\nconst MovieInfo = styled.div`\n  position: absolute;\n  top: 15%;\n  max-width: 30%;\n  left: 3%;\n  @media ${device.laptop} {\n    font-size: 18px;\n  }\n  @media ${device.desktop} {\n    font-size: 20px;\n  }\n`;\n\nconst Counter = styled.div`\n  position: relative;\n  text-align: center;\n  margin-top: 20px;\n  @media ${device.laptop} {\n    font-size: 18px;\n  }\n  @media ${device.desktop} {\n    font-size: 20px;\n  }\n`;\n\nconst SkipButton = styled.button`\n  position: relative;\n  margin-top: 10px;\n  pointer-events: ${(props) => {\n    if (props.disabled) {\n      return \"none\";\n    }\n  }};\n  border-radius: 20px;\n  border: 1px solid black;\n  outline: none;\n  cursor: pointer;\n  left: 50%;\n  transform: translateX(-50%);\n  display: block;\n  padding 5px 10px 5px 10px;\n  @media ${device.laptop} {\n    font-size: 16px;\n  }\n  @media ${device.desktop} {\n    font-size: 18px;\n  }\n`;\n\nconst CustomSelect = styled.select`\n  font-size: 18px;\n  max-width: 450px;\n  overflow: hidden;\n  white-space: nowrap;\n  text-overflow: ellipsis;\n\n`;\n\nconst CustomOption = styled.option`\n  font-size: 18px;\n  max-width: 450px;\n  overflow: hidden;\n  white-space: nowrap;\n  text-overflow: ellipsis;\n  background-color: ${(props) => {\n    if (props.skipped) {\n      return \"#c3c30b\";\n    }\n  }};\n`;\n\nconst MovieField = () => {\n  const [movies, setMovies] = useState([]);\n  const [selectedMovie, setSelectedMovie] = useState(\"\");\n  const [selectedRate, setSelectedRate] = useState(\"\");\n  const [ratingMap, setRatingMap] = useState(new Map());\n  const [posterUrl, setPosterUrl] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n  const [movieYear, setMovieYear] = useState(\"\");\n  const [movieGenres, setMovieGenres] = useState(\"\");\n  const [isRated, setRatedState] = useState(false);\n  const [skippedMovies, setSkippedMovies] = useState({});\n\n  const notify = () => toast(\"Dziękujęmy za ocenienie filmów !\");\n\n  useEffect(() => {\n    var mapCopy = new Map();\n    if (window.sessionStorage.getItem(\"skippedMovies\")) {\n      var skippedMoviesCopy = JSON.parse(\n        window.sessionStorage.getItem(\"skippedMovies\")\n      );\n      setSkippedMovies(skippedMoviesCopy);\n    }\n    if (window.sessionStorage.getItem(\"ratingMap\")) {\n      for (const [key, value] of Object.entries(\n        JSON.parse(window.sessionStorage.ratingMap)\n      )) {\n        mapCopy.set(key, value);\n      }\n      setRatingMap(mapCopy);\n    }\n    if (\n      window.sessionStorage.getItem(\"movies\") &&\n      window.sessionStorage.getItem(\"ratingMap\")\n    ) {\n      var moviesFromStorage = JSON.parse(\n        window.sessionStorage.getItem(\"movies\")\n      );\n      var moviesArray = [];\n      Object.keys(moviesFromStorage).forEach(function (key, index) {\n        moviesArray.push({\n          value: moviesFromStorage[key],\n          label: moviesFromStorage[key],\n        });\n      });\n      setMovies(moviesArray);\n      var isSelectedMovie = false;\n      moviesArray.forEach((movie) => {\n        if (!mapCopy.get(movie.value) && !isSelectedMovie) {\n          setSelectedMovie(movie);\n          isSelectedMovie = true;\n        }\n      });\n    } else {\n      const dbRef = firebase.database().ref().child(\"movies\");\n      var moviesFromDb = [];\n      dbRef.on(\"value\", (snap) => {\n        snap.forEach((movie) => {\n          moviesFromDb.push({ value: movie.key, label: movie.key });\n        });\n        moviesFromDb = shuffle(moviesFromDb);\n        setMovies(moviesFromDb);\n        setSelectedMovie(moviesFromDb[0]);\n        var moviesObj = {};\n        moviesFromDb.forEach((movie, index) => {\n          moviesObj[index] = movie.value;\n        });\n        window.sessionStorage.setItem(\"movies\", JSON.stringify(moviesObj));\n      });\n    }\n  }, []);\n\n  useEffect(() => {\n    getMovieInfo(selectedMovie);\n  }, [selectedMovie]);\n\n  const renderCheckboxes = () => {\n    var rating = [];\n    for (var i = 0; i < 6; ++i) {\n      rating.push(\n        <RatingLabel for={i}>\n          {i}\n          <Checkbox\n            className=\"checkboxStyle\"\n            name={i}\n            checked={\n              ratingMap.get(selectedMovie.value)\n                ? ratingMap.get(selectedMovie.value) === `${i}`\n                : selectedRate === `${i}`\n            }\n            onClick={(event) => {\n              setSelectedRate(event.target.name);\n              handleNextMovie(event.target.name);\n            }}\n          >\n            test\n          </Checkbox>\n        </RatingLabel>\n      );\n    }\n    rating.push(<br />);\n    rating.push(<br />);\n    rating.push(\n      <RatingLabel for={-1}>\n        Nie znam tego filmu\n        <Checkbox\n          className=\"checkboxStyle\"\n          name={-1}\n          checked={\n            ratingMap.get(selectedMovie.value)\n              ? ratingMap.get(selectedMovie.value) === `-1`\n              : selectedRate === `-1`\n          }\n          onClick={(event) => {\n            setSelectedRate(event.target.name);\n            handleNextMovie(event.target.name);\n          }}\n        />\n      </RatingLabel>\n    );\n    return rating;\n  };\n\n  const handleNextMovie = (rate) => {\n    if (skippedMovies[selectedMovie.value]) {\n      var skippedMoviesCopy = JSON.parse(JSON.stringify(skippedMovies));\n      skippedMoviesCopy[selectedMovie.value] = false;\n      setSkippedMovies(skippedMoviesCopy);\n      window.sessionStorage.setItem(\n        \"skippedMovies\",\n        JSON.stringify(skippedMoviesCopy)\n      );\n    }\n    var mapCopy = new Map(ratingMap);\n    mapCopy.set(selectedMovie.value, rate);\n    setRatingMap(mapCopy);\n    var newMovieIndex = 0;\n    movies.forEach((movie, index) => {\n      if (movie.value === selectedMovie.value) {\n        newMovieIndex = index + 1;\n      }\n    });\n    if (\n      movies.length > newMovieIndex &&\n      !ratingMap.get(movies[newMovieIndex].value)\n    ) {\n      setSelectedMovie(movies[newMovieIndex]);\n      setSelectedRate(\"\");\n    } else {\n      newMovieIndex = findFreeIndex();\n      if (movies.length > newMovieIndex) {\n        setSelectedMovie(movies[newMovieIndex]);\n        setSelectedRate(\"\");\n      }\n    }\n    const ratingObj = Object.fromEntries(mapCopy);\n    window.sessionStorage.setItem(\"ratingMap\", JSON.stringify(ratingObj));\n  };\n\n  const getMovieInfo = (movie) => {\n    if (!movie) {\n      return;\n    }\n\n    const dbRef = firebase\n      .database()\n      .ref()\n      .child(\"movies\")\n      .child(`${movie.value}`);\n    dbRef.on(\"value\", (snap) => {\n      fetch(\n        `https://api.themoviedb.org/3/movie/${snap.val()}?api_key=72ed6ba834b7f05dc61a1e4fc27613dd&language=pl`\n      )\n        .then((response) => response.json())\n        .then((data) => {\n          setPosterUrl(data.poster_path);\n          setDescription(data.overview);\n          setMovieYear(data.release_date);\n          if (data.genres) {\n            setMovieGenres(data.genres[0].name);\n          }\n        });\n    });\n  };\n\n  const findFreeIndex = () => {\n    var freeIndex = movies.length;\n    movies.forEach((movie, index) => {\n      if (\n        !ratingMap.get(movie.value) &&\n        !(movie.value === selectedMovie.value)\n      ) {\n        freeIndex = index;\n      }\n    });\n    return freeIndex;\n  };\n\n  const handleConfirmButton = () => {\n    const dbRef = firebase.database().ref().child(\"rating\");\n    var ratingObj = {};\n    ratingMap.forEach((rate, name) => {\n      ratingObj[name] = rate;\n    });\n    dbRef.push(ratingObj);\n    notify();\n    setRatedState(true);\n  };\n\n  const shuffle = (array) => {\n    var currentIndex = array.length,\n      temporaryValue,\n      randomIndex;\n\n    while (0 !== currentIndex) {\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1;\n      temporaryValue = array[currentIndex];\n      array[currentIndex] = array[randomIndex];\n      array[randomIndex] = temporaryValue;\n    }\n\n    return array;\n  };\n\n  const skipMovie = () => {\n    var newMovieIndex = 0;\n    var skippedMoviesCopy = JSON.parse(JSON.stringify(skippedMovies));\n    skippedMoviesCopy[selectedMovie.value] = true;\n    setSkippedMovies(skippedMoviesCopy);\n    window.sessionStorage.setItem(\n      \"skippedMovies\",\n      JSON.stringify(skippedMoviesCopy)\n    );\n    movies.forEach((movie, index) => {\n      if (movie.value === selectedMovie.value) {\n        newMovieIndex = index + 1;\n      }\n    });\n    if (\n      movies.length > newMovieIndex &&\n      !ratingMap.get(movies[newMovieIndex].value)\n    ) {\n      setSelectedMovie(movies[newMovieIndex]);\n      setSelectedRate(\"\");\n    } else {\n      newMovieIndex = findFreeIndex();\n      if (movies.length > newMovieIndex) {\n        setSelectedMovie(movies[newMovieIndex]);\n        setSelectedRate(\"\");\n      }\n    }\n  };\n\n  const renderOptions = () => {\n    var optionsArray = [];\n    movies.forEach((movie) => {\n      optionsArray.push(\n        <CustomOption skipped={skippedMovies[movie.value]} value={movie.value}>\n          {movie.value}\n        </CustomOption>\n      );\n    });\n    return optionsArray;\n  };\n\n  const handleSelect = (event) => {\n    setSelectedMovie({\n      value: event.target.value,\n      label: event.target.value,\n    });\n  };\n\n  return (\n    <>\n      <SelectMovieField>\n        <Header>Wybierz film do oceny:</Header>\n        <SelectField>\n          {/* <Select\n            value={selectedMovie}\n            onChange={setSelectedMovie}\n            options={movies}\n            placeholder={`Wybierz z listy ...`}\n            noResultsText={`Nie znaleziono wyników`}\n          /> */}\n          <CustomSelect\n            value={selectedMovie.value}\n            onChange={(event) => {\n              handleSelect(event);\n            }}\n          >\n            {renderOptions()}\n          </CustomSelect>\n        </SelectField>\n        {selectedMovie ? <RatingField>{renderCheckboxes()}</RatingField> : null}\n        {movies.length ? (\n          <Counter>\n            {ratingMap.size} / {movies.length}\n          </Counter>\n        ) : null}\n        <SkipButton onClick={skipMovie}>Pomiń</SkipButton>\n        {ratingMap.size === movies.length && movies.length ? (\n          <ConfirmButton onClick={handleConfirmButton} disabled={isRated}>\n            Wyślij\n          </ConfirmButton>\n        ) : null}\n      </SelectMovieField>\n      <MovieInfo>\n        {movieGenres ? `Gatunek: ${movieGenres}` : null}\n        {movieGenres ? (\n          <>\n            <br />\n            <br />\n          </>\n        ) : null}\n        {movieYear ? `Data premiery: ${movieYear}` : null}\n        {movieYear ? (\n          <>\n            <br />\n            <br />\n          </>\n        ) : null}\n        {description}\n      </MovieInfo>\n      {posterUrl ? (\n        <Poster\n          alt=\"poster\"\n          src={`https://image.tmdb.org/t/p/original${posterUrl}`}\n        />\n      ) : null}\n    </>\n  );\n};\n\nexport default MovieField;\n","import MovieField from \"./Movie/MovieField\";\nimport \"./Styles/app-styles.css\";\nimport { ToastContainer } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\n\nfunction App() {\n  return (\n    <>\n      <MovieField />\n      <ToastContainer\n        position=\"top-center\"\n        hideProgressBar={true}\n        autoClose={false}\n      />\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}