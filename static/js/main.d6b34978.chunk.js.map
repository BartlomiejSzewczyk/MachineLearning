{"version":3,"sources":["Styles/resolutions.js","Firebase/firebase.js","Movie/MovieField.js","App.js","reportWebVitals.js","index.js"],"names":["device","firebase","initializeApp","apiKey","authDomain","databaseURL","storageBucket","SelectMovieField","styled","div","Header","SelectField","RatingField","RatingLabel","label","ConfirmButton","button","Poster","img","MovieInfo","MovieField","useState","movies","setMovies","selectedMovie","setSelectedMovie","selectedRate","setSelectedRate","Map","ratingMap","setRatingMap","posterUrl","setPosterUrl","description","setDescription","movieYear","setMovieYear","movieGenres","setMovieGenres","useEffect","dbRef","database","ref","child","moviesFromDb","on","snap","forEach","movie","push","value","key","getMovieInfo","handleNextMovie","rate","mapCopy","set","newMovieIndex","index","length","get","findFreeIndex","fetch","val","then","response","json","data","poster_path","overview","release_date","genres","name","freeIndex","onChange","options","placeholder","noResultsText","rating","i","for","disabled","className","checked","onClick","event","target","renderCheckboxes","size","ratingObj","alt","src","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d6b34978.chunk.js","sourcesContent":["export const device = {\n  laptop: `(max-width: 1440px)`,\n  desktop: `(min-width: 1441px)`,\n};\n","import firebase from \"firebase\";\n\nvar config = {\n  apiKey: \"AIzaSyBCjEoB2RKgBw9zPHVWS-syRsv1Vm_889w\",\n  authDomain: \"machinelearning-cfc59.firebaseapp.com\",\n  databaseURL: \"https://machinelearning-cfc59.firebaseio.com\",\n  storageBucket: \"machinelearning-cfc59.appspot.com\",\n};\n\nfirebase.initializeApp(config);\n\nexport default firebase;\n","import styled from \"styled-components\";\nimport { device } from \"../Styles/resolutions\";\nimport { useState, useEffect } from \"react\";\nimport Select from \"react-select\";\nimport Checkbox from \"rc-checkbox\";\nimport \"../Styles/checkboxes-styles.css\";\nimport firebase from \"../Firebase/firebase\";\n\nconst SelectMovieField = styled.div`\n  position: absolute;\n  top: 10%;\n  left: 35%;\n  width: 30%;\n  height: 80%;\n`;\n\nconst Header = styled.div`\n  position: relative;\n  text-align: center;\n  @media ${device.laptop} {\n    font-size: 40px;\n  }\n  @media ${device.desktop} {\n    font-size: 46px;\n  }\n`;\n\nconst SelectField = styled.div`\n  position: relative;\n  margin-top: 20px;\n  width: 80%;\n  left: 10%;\n`;\n\nconst RatingField = styled.div`\n  position: relative;\n  margin-top: 20px;\n  text-align: center;\n`;\n\nconst RatingLabel = styled.label`\n  padding: 5px;\n  @media ${device.laptop} {\n    font-size: 22px;\n  }\n  @media ${device.desktop} {\n    font-size: 26px;\n  }\n`;\n\nconst ConfirmButton = styled.button`\n  position: relative;\n  margin-top: 20px;\n  background: #484871;\n  width: 150px;\n  max-width: 30%;\n  height: 50px;\n  border-radius: 20px;\n  border: 2px solid black;\n  color: white;\n  outline: none;\n  cursor: pointer;\n  left: 50%;\n  transform: translateX(-50%);\n  @media ${device.laptop} {\n    font-size: 20px;\n  }\n  @media ${device.desktop} {\n    font-size: 22px;\n  }\n`;\n\nconst Poster = styled.img`\n  position: absolute;\n  width: 20%;\n  top: 50%;\n  transform: translateY(-50%);\n  right: 50px;\n`;\n\nconst MovieInfo = styled.div`\n  position: absolute;\n  top: 10%;\n  max-width: 30%;\n  left: 3%;\n  @media ${device.laptop} {\n    font-size: 18px;\n  }\n  @media ${device.desktop} {\n    font-size: 20px;\n  }\n`;\n\nconst MovieField = () => {\n  const [movies, setMovies] = useState([]);\n  const [selectedMovie, setSelectedMovie] = useState(\"\");\n  const [selectedRate, setSelectedRate] = useState(\"\");\n  const [ratingMap, setRatingMap] = useState(new Map());\n  const [posterUrl, setPosterUrl] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n  const [movieYear, setMovieYear] = useState(\"\");\n  const [movieGenres, setMovieGenres] = useState(\"\");\n\n  useEffect(() => {\n    const dbRef = firebase.database().ref().child(\"movies\");\n    var moviesFromDb = [];\n    dbRef.on(\"value\", (snap) => {\n      snap.forEach((movie) => {\n        moviesFromDb.push({ value: movie.key, label: movie.key });\n      });\n      setMovies(moviesFromDb);\n      setSelectedMovie(moviesFromDb[0]);\n    });\n  }, []);\n\n  useEffect(() => {\n    getMovieInfo(selectedMovie);\n  }, [selectedMovie]);\n\n  const renderCheckboxes = () => {\n    var rating = [];\n    for (var i = 0; i < 6; ++i) {\n      rating.push(\n        <RatingLabel for={i}>\n          {i}\n          <Checkbox\n            disabled={ratingMap.get(selectedMovie.value)}\n            className=\"checkboxStyle\"\n            name={i}\n            checked={\n              ratingMap.get(selectedMovie.value)\n                ? ratingMap.get(selectedMovie.value) === `${i}`\n                : selectedRate === `${i}`\n            }\n            onClick={(event) => {\n              setSelectedRate(event.target.name);\n              handleNextMovie(event.target.name);\n            }}\n          />\n        </RatingLabel>\n      );\n    }\n    rating.push(<br />);\n    rating.push(<br />);\n    rating.push(\n      <RatingLabel for={-1}>\n        Nie znam tego filmu\n        <Checkbox\n          disabled={ratingMap.get(selectedMovie.value)}\n          className=\"checkboxStyle\"\n          name={-1}\n          checked={\n            ratingMap.get(selectedMovie.value)\n              ? ratingMap.get(selectedMovie.value) === `-1`\n              : selectedRate === `-1`\n          }\n          onClick={(event) => {\n            setSelectedRate(event.target.name);\n            handleNextMovie(event.target.name);\n          }}\n        />\n      </RatingLabel>\n    );\n    return rating;\n  };\n\n  const handleNextMovie = (rate) => {\n    var mapCopy = new Map(ratingMap);\n    mapCopy.set(selectedMovie.value, rate);\n    setRatingMap(mapCopy);\n    var newMovieIndex = 0;\n    movies.forEach((movie, index) => {\n      if (movie.value === selectedMovie.value) {\n        newMovieIndex = index + 1;\n      }\n    });\n    if (\n      movies.length > newMovieIndex &&\n      !ratingMap.get(movies[newMovieIndex].value)\n    ) {\n      setSelectedMovie(movies[newMovieIndex]);\n      setSelectedRate(\"\");\n    } else {\n      newMovieIndex = findFreeIndex();\n      if (movies.length > newMovieIndex) {\n        setSelectedMovie(movies[newMovieIndex]);\n        setSelectedRate(\"\");\n      }\n    }\n  };\n\n  const getMovieInfo = (movie) => {\n    const dbRef = firebase\n      .database()\n      .ref()\n      .child(\"movies\")\n      .child(`${movie.value}`);\n    dbRef.on(\"value\", (snap) => {\n      fetch(\n        `https://api.themoviedb.org/3/movie/${snap.val()}?api_key=72ed6ba834b7f05dc61a1e4fc27613dd&language=pl`\n      )\n        .then((response) => response.json())\n        .then((data) => {\n          setPosterUrl(data.poster_path);\n          setDescription(data.overview);\n          setMovieYear(data.release_date);\n          setMovieGenres(data.genres[0].name);\n        });\n    });\n  };\n\n  const findFreeIndex = () => {\n    var freeIndex = movies.length;\n    movies.forEach((movie, index) => {\n      if (\n        !ratingMap.get(movie.value) &&\n        !(movie.value === selectedMovie.value)\n      ) {\n        freeIndex = index;\n      }\n    });\n    return freeIndex;\n  };\n\n  const handleConfirmButton = () => {\n    const dbRef = firebase.database().ref().child(\"rating\");\n    var ratingObj = {};\n    ratingMap.forEach((rate, name) => {\n      ratingObj[name] = rate;\n    });\n    dbRef.push(ratingObj);\n  };\n\n  return (\n    <>\n      <SelectMovieField>\n        <Header>Wybierz film do oceny:</Header>\n        <SelectField>\n          <Select\n            value={selectedMovie}\n            onChange={setSelectedMovie}\n            options={movies}\n            placeholder={`Wybierz z listy ...`}\n            noResultsText={`Nie znaleziono wyników`}\n          />\n        </SelectField>\n        {selectedMovie ? <RatingField>{renderCheckboxes()}</RatingField> : null}\n        {ratingMap.size === movies.length && movies.length ? (\n          <ConfirmButton onClick={handleConfirmButton}>Wyślij</ConfirmButton>\n        ) : null}\n      </SelectMovieField>\n      <MovieInfo>\n        {movieGenres ? `Gatunek: ${movieGenres}` : null}\n        {movieGenres ? (\n          <>\n            <br />\n            <br />\n          </>\n        ) : null}\n        {movieYear ? `Data premiery: ${movieYear}` : null}\n        {movieYear ? (\n          <>\n            <br />\n            <br />\n          </>\n        ) : null}\n        {description}\n      </MovieInfo>\n      {posterUrl ? (\n        <Poster\n          alt=\"poster\"\n          src={`https://image.tmdb.org/t/p/original${posterUrl}`}\n        />\n      ) : null}\n    </>\n  );\n};\n\nexport default MovieField;\n","import MovieField from \"./Movie/MovieField\";\nimport \"./Styles/app-styles.css\";\n\nfunction App() {\n  return <MovieField />;\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}